package timeline;

import java.awt.*;
import java.awt.event.*;
import java.util.*;
import javax.swing.*;

/**
 * A JFrame to manage event categories.
 * 
 * @author Daniel
 * @author Kayley
 */
public class ManageCategories extends javax.swing.JFrame {
    private final FileIO fileIO;
    private Category selectedCategory;
    private final ManageCategories thisManageCategories;
    /**
     * Constructor
     * 
     * @param fileIO The fileIO by which to save.
     */
    public ManageCategories(FileIO fileIO) {
        this.fileIO = fileIO;   
        openEditCategories = new ArrayList<EditCategory>();
        thisManageCategories = this;
        initComponents();
    }

    private JButton editButton;
    private JButton createButton;
    private JButton deleteButton;
    private JButton refreshButton;    
    private JComboBox jComboBox1;
    private JLabel titleLabel;
    private JTextField nameTextField;
    private static ArrayList<EditCategory> openEditCategories;
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private void initComponents() {
        setResizable(false);
        
        Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
        int y = (int) ((d.getHeight() - getHeight()) / 2);        
        int x = (int) ((d.getWidth() - getWidth()) / 2);
        setLocation(x, y);
        
        refreshButton = new JButton();
        titleLabel = new JLabel();
        jComboBox1 = new JComboBox();
        editButton = new JButton();
        deleteButton = new JButton();
        createButton = new JButton();
        nameTextField = new JTextField();
        nameTextField.setDocument(new JTextFieldLimit(20));

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        titleLabel.setText("Manage Categories");
        
        try{
            titleLabel.setFont(new Font("Vijaya", 0, 42));
        }catch(Exception e){
            titleLabel.setFont(new Font("Times new Roman", 0, 34));
        }
        
        setComboBox();
        
        editButton.setText("Edit Category");
        deleteButton.setText("Delete Category");
        createButton.setText("Create Category");
        nameTextField.setText("<Name>");
        
        editButton.addActionListener(new MCListener());
        deleteButton.addActionListener(new MCListener());
        createButton.addActionListener(new MCListener());
        
        jComboBox1.addActionListener(new ComboBoxListener());
                
        refreshButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                setComboBox();
            }
        });

        ImageIcon icon = createImageIcon("refresh.png",
                                 "refresh");
        
        refreshButton.setIcon(icon);
        
        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setAutoCreateGaps(true);
        layout.setAutoCreateContainerGaps(true);
        
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(refreshButton, GroupLayout.PREFERRED_SIZE, 26, GroupLayout.PREFERRED_SIZE)
                        .addComponent(deleteButton, GroupLayout.PREFERRED_SIZE, 133, GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jComboBox1, GroupLayout.PREFERRED_SIZE, 135, GroupLayout.PREFERRED_SIZE)
                            .addComponent(editButton, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(titleLabel))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(nameTextField, GroupLayout.PREFERRED_SIZE, 135, GroupLayout.PREFERRED_SIZE)
                                    .addComponent(createButton, GroupLayout.PREFERRED_SIZE, 133, GroupLayout.PREFERRED_SIZE)))
                            ))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(titleLabel)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(createButton)
                    .addComponent(nameTextField, GroupLayout.PREFERRED_SIZE, 26, GroupLayout.PREFERRED_SIZE))    
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, GroupLayout.PREFERRED_SIZE, 27, GroupLayout.PREFERRED_SIZE)
                    .addComponent(editButton))
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                .addComponent(refreshButton, GroupLayout.PREFERRED_SIZE, 26, GroupLayout.PREFERRED_SIZE)
                .addComponent(deleteButton))
)
        );
       
        pack();
    }// </editor-fold>                        

    /**
     * Populates the ComboBox with categories.
     */
    public void setComboBox(){
        Iterator<Category> categoryIterator =  fileIO.getCategoryIterator();
        String[] names = new String[fileIO.catSize()];
        int i = 0;
        Category c = new Category("Base");
        while(categoryIterator.hasNext()){
            c = categoryIterator.next();
            names[i++] = c.getName();
        }
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(names));
        selectedCategory = c;
    }
    
    /** 
     * Returns an ImageIcon, or null if the path was invalid. 
     * Code by http://docs.oracle.com/javase/tutorial/uiswing/components/icon.html.
     */
    protected ImageIcon createImageIcon(String path,String description) {
        java.net.URL imgURL = getClass().getResource(path);
        if (imgURL != null) {
            return new ImageIcon(imgURL, description);
        } else {
            System.err.println("Couldn't find file: " + path);
            return null;
        }
    }
    /**
     * Adds an EditCategory child to this window.
     * 
     * @param e The EditCategory window to be added.
     */
    public void addEditCategory(EditCategory e){
        openEditCategories.add(e);
    }
    /**
     * Removes an EditCategory child from this window.
     * 
     * @param e The EditCategory to be removed.
     */
    public void removeEditCategory(EditCategory e){
        openEditCategories.remove(e);
    }
    /**
     * If the category in question is deleted, events which were previously
     * in that category will be assigned a new category.
     * 
     * @param wasDeleted The category which was deleted.
     */
    private void resetEventCategories(Category wasDeleted){
        Iterator<Timeline> timelineIterator = fileIO.getTimelineIterator();
        while(timelineIterator.hasNext()){
            Timeline t = timelineIterator.next();
            Iterator<Event> eventIterator = t.getEventIterator();
            while(eventIterator.hasNext()){
                Event e = eventIterator.next();
                if(e.getCategory().getName().equals(wasDeleted.getName())){
                    e.setCategory(fileIO.getDefaultCategory());
                }
            }
        }
    }
    /**
     * A Listener to edit or delete a category.
     */
    private class MCListener implements ActionListener{
        /**
         * Constructor
         */
        public MCListener(){}
        /**
         * Implements ActionPerformed to 
         * 
         * @param ae 
         */
        public void actionPerformed(ActionEvent ae){
            JButton thisButton = (JButton) ae.getSource();
            
            if(thisButton == editButton){
               for(EditCategory e : openEditCategories)
                    if(e.getCategory().getName().equals(selectedCategory.getName()))
                        return;
                java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    new EditCategory(selectedCategory, fileIO, thisManageCategories).setVisible(true);
                }
            });

           }else if(thisButton == deleteButton){
               if(fileIO.catSize()>1){
                    for(EditCategory ec : openEditCategories){
                        if(ec.getCategory().getName().equals(
                                selectedCategory.getName())){
                            ec.dispose();
                            ec.setVisible(false);
                            removeEditCategory(ec);
                            break;
                         }
                    }
                   resetEventCategories(selectedCategory);
                   fileIO.deleteCategory(selectedCategory);
                   fileIO.save();
                   setComboBox();
               }

            }else if(thisButton == createButton){
                String name = nameTextField.getText().trim();
                if(name.length() <= 1){
                     JOptionPane.showMessageDialog(
                              null, "Name must be at least 2 characters long!", 
                              "FATAL_ERROR", 
                              JOptionPane.ERROR_MESSAGE);
                     return;
                }

                if(name.equals("<Name>")) return;
                Category cat = new Category(name);
                fileIO.addCategory(cat);
                setComboBox(); // Reset combo box to display the new timeline.
                jComboBox1.setSelectedItem(cat.getName());
                selectedCategory = cat;
            }
        }
    }
    /**
     * A listener to select from the comboBox.
     */
    private class ComboBoxListener implements ActionListener{
        /**
         * Constructor
         */
        public ComboBoxListener(){}
        /**
         * Implements the actionPerformed to select a category.
         * 
         * @param ae The ActionEvent.
         */
        public void actionPerformed(ActionEvent ae){
            JComboBox thisBox = (JComboBox) ae.getSource();
            Iterator<Category> categoryIterator =  fileIO.getCategoryIterator();
            Category c;
            while(categoryIterator.hasNext()){
                c = categoryIterator.next();
                if(thisBox.getSelectedItem().equals(c.getName())){
                   selectedCategory = c;
                   break;
                }            
            }
        }
    }   
}