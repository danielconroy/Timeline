
package timeline;

import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;
import java.util.Iterator;
import javax.swing.*;

public class ManageTimelines extends javax.swing.JFrame {

    /**
     * Creates new form ManageTimelines
     */
    private FileIO fileIO;
    private Timeline selectedTimeline = new Timeline("Base");
    
    public ManageTimelines(FileIO fileIO) {
        this.fileIO = fileIO;
        initComponents();
    }
    
    private javax.swing.JButton manageButton;
    private javax.swing.JButton createButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JTextField nameTextField;


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        setResizable(false);
        
        Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
        int y = (int) ((d.getHeight() - getHeight()) / 2);        
        int x = (int) ((d.getWidth() - getWidth()) / 2);
        setLocation(x, y);

        titleLabel = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        manageButton = new javax.swing.JButton();
        createButton = new javax.swing.JButton();
        nameTextField = new javax.swing.JTextField();
        deleteButton = new javax.swing.JButton();
        
        manageButton.addActionListener(new MTListener());
        createButton.addActionListener(new MTListener());
        deleteButton.addActionListener(new MTListener());
        
        jComboBox1.addActionListener(new ComboBoxListener());

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        titleLabel.setText("Manage Timelines");

        try{
            titleLabel.setFont(new Font("Vijaya", 0, 42));
        }catch(Exception e){
            titleLabel.setFont(new Font("Times new Roman", 0, 34));
        }
                
        setComboBox();

        manageButton.setText("Edit Timeline");
        createButton.setText("Create Timeline");
        nameTextField.setText("<Name>");
        deleteButton.setText("Delete Timeline");

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setAutoCreateGaps(true);
        layout.setAutoCreateContainerGaps(true);

        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup()
                         .addComponent(titleLabel)    
                        .addComponent(jComboBox1, GroupLayout.PREFERRED_SIZE, 135, GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(nameTextField, GroupLayout.PREFERRED_SIZE, 135, GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                    .addComponent(manageButton, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)    
                                    .addComponent(deleteButton, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(createButton, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                ))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(titleLabel)
            .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                .addComponent(createButton)
                .addComponent(nameTextField, GroupLayout.PREFERRED_SIZE, 26, GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, GroupLayout.PREFERRED_SIZE, 27, GroupLayout.PREFERRED_SIZE)
                    .addComponent(manageButton))
                .addComponent(deleteButton)
                ));

        pack();
        
        //</editor-fold>

    }// </editor-fold>//GEN-END:initComponents

/*
    Sets all the combo box options with all the timelines
    available and known to the FileIO object.
    
    */
private void setComboBox(){
    Iterator<Timeline> timelineIterator =  fileIO.getTimelineIterator();
    String[] names = new String[fileIO.timeSize()+1];
    int i = 1;
    names[0] = "All Timelines";
    Timeline t;
    while(timelineIterator.hasNext()){
        t = timelineIterator.next();
        names[i++] = t.getTitle();
    }
    jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(names));
}
     
private class MTListener implements ActionListener{
    
    public MTListener(){
    }
    
    public void actionPerformed(ActionEvent ae){
        JButton thisButton = (JButton) ae.getSource();
        if(thisButton == manageButton){
            if(fileIO.timeSize()==0) return;
            java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EditTimeline(selectedTimeline, fileIO).setVisible(true);
            }
        });

       }else if(thisButton == deleteButton){
           if(!selectedTimeline.getTitle().equals("Base")){
               fileIO.deleteTimeline(selectedTimeline);
               setComboBox();
           }
           fileIO.save();
       }else if(thisButton == createButton){
           String name = nameTextField.getText();
           if(name.equals("<Name>")) return;
           Timeline time = new Timeline(name);
           fileIO.addTimeline(time);
           setComboBox(); // Reset combo box to display the new timeline.
           jComboBox1.setSelectedItem(time.getTitle());
           selectedTimeline = time;
           java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EditTimeline(selectedTimeline, fileIO).setVisible(true);
            }
        });
        fileIO.save();
       }
    }
    
    }

private class ComboBoxListener implements ActionListener{
    
    public ComboBoxListener(){
        
    }
    
    public void actionPerformed(ActionEvent ae){
        JComboBox thisBox = (JComboBox) ae.getSource();
        
        Iterator<Timeline> timelineIterator =  fileIO.getTimelineIterator();
        Timeline t;
        while(timelineIterator.hasNext()){
            t = timelineIterator.next();
            if(thisBox.getSelectedItem().equals(t.getTitle())){
                selectedTimeline = t;
                break;
            }            
        }
    }
    
}


}
    


